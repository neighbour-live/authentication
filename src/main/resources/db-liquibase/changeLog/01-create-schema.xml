<?xml version="1.0" encoding="utf-8" ?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="enum" author="Muhammad Safwan">
        <sql>

            DROP TYPE IF EXISTS public.auth_provider;
            CREATE TYPE public.auth_provider AS ENUM (
                'local',
                'facebook',
                'google'
            );

            DROP TYPE IF EXISTS public.award_type;
            CREATE TYPE public.award_type AS ENUM (
                'MORE_THAN_1_TASKS_IN_AN_HOUR',
                'AVERAGE_4_ABOVE_RATING_FOR_A_MONTH',
                'STREAK_OF_FIVE_5_STAR_REVIEWS',
                'YOU_HAVE_SUCCESSFULLY_COMPLETED_50_TASKS',
                'SPEED_GROWTH_10_TASKS_WEEKLY',
                'EARNED_$300_IN_THIS_MONTH',
                '10_TASKS_IN_MORE_THAN_ONE_SKILLS',
                'AVERAGE_3_ABOVE_RATING_FOR_A_MONTH',
                'YOU_HAVE_SUCCESSFULLY_EARNED_FIFTY_5_STAR_REVIEWS'
            );

            DROP TYPE IF EXISTS public.card_brand;
            CREATE TYPE public.card_brand AS ENUM (
                'VISA',
                'MASTERCARD',
                'UNIONPAY',
                'AMERICANEXPRESS'
            );

            DROP TYPE IF EXISTS public.card_type;
            CREATE TYPE public.card_type AS ENUM (
                'CREDIT',
                'DEBIT',
                'ATM'
            );

            DROP TYPE IF EXISTS public.skill_proficiency;
            CREATE TYPE public.skill_proficiency AS ENUM (
                'BASIC',
                'MID_LEVEL',
                'AWESOME',
                'EXPERT'
            );

            DROP TYPE IF EXISTS public.payment_type;
            CREATE TYPE public.payment_type AS ENUM (
                'FIXED',
                'HOURLY',
                'MILESTONE'
            );

            DROP TYPE IF EXISTS public.task_repeat;
            CREATE TYPE public.task_repeat AS ENUM (
                'DAILY',
                'WEEKLY',
                'MONTHLY'
            );

            DROP TYPE IF EXISTS public.transaction_type;
            CREATE TYPE public.transaction_type AS ENUM (
                'CREDIT',
                'DEBIT',
                'ESCROW'
            );

            DROP TYPE IF EXISTS public.mediums;
            CREATE TYPE public.mediums AS ENUM (
                'WEBSITE', 'ANDROID', 'IOS', 'PORTAL'
            );
        </sql>
    </changeSet>

    <changeSet id="user_type_enum" author="Muhammad Safwan">
        <sql>
            DROP TYPE IF EXISTS public.user_type;
            CREATE TYPE public.user_type AS ENUM (
            'USER', 'MODERATOR', 'ADMIN'
            );
        </sql>
    </changeSet>

    <changeSet id="table" author="Muhammad Safwan">
        <sql>

            DROP SEQUENCE IF EXISTS public.hibernate_sequence;
            CREATE SEQUENCE public.hibernate_sequence
            START WITH 1
            INCREMENT BY 1
            NO MINVALUE
            NO MAXVALUE
            CACHE 1;
            ALTER TABLE public.hibernate_sequence OWNER TO postgres;

            DROP TABLE IF EXISTS public.awards;
            CREATE TABLE IF NOT EXISTS public.awards (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                award_icon character varying(255) NOT NULL,
                award_type public.award_type NOT NULL,
                description text NOT NULL,
                public_id bigint NOT NULL,
                title character varying(255) NOT NULL
            );
            ALTER TABLE public.awards OWNER TO postgres;


            DROP TABLE IF EXISTS public.reviews;
            CREATE TABLE IF NOT EXISTS public.reviews (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_deleted_by_poster boolean DEFAULT false,
                is_deleted_by_tasker boolean DEFAULT false,
                is_removed boolean DEFAULT false,
                is_reported_by_poster boolean DEFAULT false,
                is_reported_by_tasker boolean DEFAULT false,
                is_reviewed_poster boolean DEFAULT false,
                is_reviewed_tasker boolean DEFAULT false,
                poster_image text,
                poster_name character varying(255),
                poster_review text,
                poster_stars integer,
                public_id bigint NOT NULL,
                tasker_image text,
                tasker_name character varying(255),
                tasker_review text,
                tasker_stars integer,
                poster_public_id bigint,
                task_public_id bigint,
                tasker_public_id bigint
            );
            ALTER TABLE public.reviews OWNER TO postgres;

            DROP TABLE IF EXISTS public.skills;
            CREATE TABLE IF NOT EXISTS public.skills (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_approved boolean DEFAULT true NOT NULL,
                name character varying(255) NOT NULL,
                public_id bigint NOT NULL,
                skill_icon character varying(255)
            );
            ALTER TABLE public.skills OWNER TO postgres;


            DROP TABLE IF EXISTS public.tasks;
            CREATE TABLE IF NOT EXISTS public.tasks (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                description text NOT NULL,
                is_approved boolean DEFAULT true NOT NULL,
                is_assigned boolean DEFAULT false NOT NULL,
                is_completed boolean DEFAULT false NOT NULL,
                is_deleted boolean DEFAULT false NOT NULL,
                is_pending boolean DEFAULT true NOT NULL,
                title character varying(255) NOT NULL,
                task_repeat character varying(255) DEFAULT NULL,
                payment_type character varying(255) NOT NULL,
                budget decimal NOT NULL,
                task_time float DEFAULT NULL,
                hourly_rate float DEFAULT NULL,
                milestone_rate float DEFAULT NULL,
                task_media text DEFAULT '',
                task_status character varying(255) DEFAULT 'APPROVED',
                start_date_time timestamp with time zone NOT NULL,
                user_address_public_id bigint,
                task_category_public_id bigint,
                task_transaction bigint,
                blocked_by bigint,
                supplier_public_id bigint,
                buyer_public_id bigint,
                task_completed_as_tasker int default 0,
                task_completed_as_poster int default 0,
                end_datetime timestamp,
                is_reschedule_requested boolean,
                is_rescheduled boolean,
                reschedule_date_time timestamp,
                review_public_id bigint,
                remote_task boolean DEFAULT false NOT NULL
            );
            ALTER TABLE public.tasks OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_addresses;
            CREATE TABLE IF NOT EXISTS public.user_addresses (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                address_type character varying(25) NOT NULL,
                apartment_address character varying(255),
                is_deleted boolean DEFAULT false NOT NULL,
                public_id bigint NOT NULL,
                address_line character varying(255) NOT NULL,
                country character varying(255) NOT NULL,
                state character varying(255) NOT NULL,
                city character varying(255) NOT NULL,
                postal_code character varying(255) NOT NULL,
                lat float,
                lng float,
                user_id bigint
            );
            ALTER TABLE public.user_addresses OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_awards;
            CREATE TABLE IF NOT EXISTS public.user_awards (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_active boolean DEFAULT true NOT NULL,
                is_unlocked boolean DEFAULT false NOT NULL,
                progress integer NOT NULL,
                public_id bigint NOT NULL,
                award_id bigint,
                user_id bigint
            );
            ALTER TABLE public.user_awards OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_payment_cards;
            CREATE TABLE IF NOT EXISTS public.user_payment_cards (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                card_brand character varying(255),
                card_expiry_date character varying(255) NOT NULL,
                card_number character varying(15) NOT NULL,
                card_type character varying(255),
                card_verified boolean DEFAULT false NOT NULL,
                cardholder_name character varying(255) NOT NULL,
                is_active boolean DEFAULT false NOT NULL,
                is_deleted boolean DEFAULT false NOT NULL,
                is_default boolean DEFAULT false NOT NULL,
                public_id bigint NOT NULL,
                user_id bigint,
                stripe_source_id character varying(255) NOT NULL,
                stripe_source_object text
            );
            ALTER TABLE public.user_payment_cards OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_skills;
            CREATE TABLE IF NOT EXISTS public.user_skills (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                public_id bigint NOT NULL,
                title character varying(255) NOT NULL,
                description  character varying(255) NOT NULL,
                is_active boolean DEFAULT false NOT NULL,
                is_deleted boolean DEFAULT false NOT NULL,
                skill_proficiency character varying(255) NOT NULL,
                user_id bigint,
                skill_id bigint
            );
            ALTER TABLE public.user_skills OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_certifications;
            CREATE TABLE IF NOT EXISTS public.user_certifications (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                certification_url text,
                expiry_date character varying(255),
                is_approved boolean DEFAULT false NOT NULL,
                is_deleted boolean DEFAULT false NOT NULL,
                issuing_date character varying(255) NOT NULL,
                issuing_institution character varying(255) NOT NULL,
                public_id bigint NOT NULL,
                title character varying(255) NOT NULL,
                description character varying(255) NOT NULL,
                user_id bigint,
                skill_id bigint
            );
            ALTER TABLE public.user_certifications OWNER TO postgres;

            DROP TABLE IF EXISTS public.users;
            CREATE TABLE IF NOT EXISTS public.users (
                id BIGSERIAL NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                access_token character varying(255),
                address_type character varying(25),
                apartment_address character varying(255),
                card_verified boolean,
                credentials_try_count integer,
                email character varying(255),
                email_verification_token character varying(255),
                email_verified boolean,
                first_name character varying(255),
                image_url character varying(255),
                is_blocked boolean,
                is_deleted boolean,
                is_suspended boolean,
                last_name character varying(255),
                password character varying(255),
                phone_number character varying(255),
                user_tagline character varying(255),
                user_bio character varying(255),
                phone_verification_otp character varying(255),
                phone_verification_token character varying(255),
                phone_verified boolean,
                provider character varying(255),
                provider_id character varying(255),
                public_id bigint NOT NULL,
                poster_rating_avg double precision DEFAULT 0.00,
                tasker_rating_avg double precision DEFAULT 0.00,
                sterling_background_verified boolean,
                address_line character varying(255),
                postal_code character varying(25),
                city character varying(50),
                state character varying(50),
                country character varying(50),
                country_short character varying(50),
                currency character varying(50),
                ip character varying(15),
                dob character varying(10),
                lat float,
                lng float,
                stripe_id character varying(255),
                connect_id character varying(255),
                email_token_creation_time timestamp,
                firebase_key character varying(255),
                otp_creation_time timestamp,
                tasks_completed_as_poster integer,
                tasks_completed_as_tasker integer
            );
            ALTER TABLE public.users OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_transactions;
            CREATE TABLE IF NOT EXISTS public.user_transactions (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                transaction_type character varying(255) NOT NULL,
                amount decimal NOT NULL,
                purpose character varying(255),
                description text,
                category character varying(255),
                payment_id character varying(255) NOT NULL,
                user_id bigint
            );
            ALTER TABLE public.user_transactions OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_bank_account;
            CREATE TABLE IF NOT EXISTS public.user_bank_account (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                account_holder_name character varying(255) NOT NULL,
                bank_name character varying(255) NOT NULL,
                transit_number character varying(5) NOT NULL,
                financial_institution_number character varying(3) NOT NULL,
                account_number character varying(12) NOT NULL,
                is_verified boolean DEFAULT false NOT NULL,
                is_active boolean DEFAULT false NOT NULL,
                is_deleted boolean DEFAULT false NOT NULL,
                is_default boolean DEFAULT false NOT NULL,
                user_id bigint,
                stripe_source_id character varying(255) NOT NULL,
                stripe_source_object text
            );
            ALTER TABLE public.user_bank_account OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_wallet;
            CREATE TABLE IF NOT EXISTS public.user_wallet (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                currency character varying(255) NOT NULL,
                amount decimal NOT NULL,
                user_id bigint

            );
            ALTER TABLE public.user_wallet OWNER TO postgres;

            DROP TABLE IF EXISTS public.report_user;
            CREATE TABLE IF NOT EXISTS public.report_user (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_resolved boolean DEFAULT false NOT NULL,
                subject character varying(255) NOT NULL,
                issue text NOT NULL,
                reporter_public_id bigint NOT NULL,
                reported_public_id bigint NOT NULL

            );
            ALTER TABLE public.report_user OWNER TO postgres;


            DROP TABLE IF EXISTS public.support_user;
            CREATE TABLE IF NOT EXISTS public.support_user (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_resolved boolean DEFAULT false NOT NULL,
                related_to character varying(255) NOT NULL,
                description character varying(255) NOT NULL,
                user_public_id bigint NOT NULL

            );
            ALTER TABLE public.support_user OWNER TO postgres;

            DROP TABLE IF EXISTS public.task_categories;
            CREATE TABLE IF NOT EXISTS public.task_categories (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                name character varying(255) NOT NULL,
                icon_url character varying(255) NOT NULL

            );
            ALTER TABLE public.task_categories OWNER TO postgres;

            DROP TABLE IF EXISTS public.user_bids;
            CREATE TABLE IF NOT EXISTS public.user_bids (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_deleted boolean default false,
                is_active boolean default true,
                hours int default 0 NOT NULL,
                hourly_rate double precision default 0.0 NOT NULL,
                budget double precision default 0.0 NOT NULL,
                other_costs double precision default 0.0 NOT NULL,
                description text,
                other_costs_explanation text,
                time_utilization_explanation text,
                status character varying(25) DEFAULT NULL,
                image_url text,
                user_id bigint,
                task_id bigint
            );
            ALTER TABLE public.user_bids OWNER TO postgres;


            DROP TABLE IF EXISTS public.logs;
            CREATE TABLE IF NOT EXISTS public.logs (
                id BIGSERIAL NOT NULL,
                request text,
                response TEXT,
                is_deleted boolean DEFAULT false NOT NULL,
                ip_address Character Varying(15) NOT NULL DEFAULT '120.0.0.1',
                user_public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone
            );
            ALTER TABLE public.logs OWNER TO postgres;


            DROP TABLE IF EXISTS public.user_temporary;
            CREATE TABLE IF NOT EXISTS public.user_temporary (
                id BIGSERIAL NOT NULL,
                email character varying(255),
                password character varying(255),
                phone_number character varying(255),
                user_public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone
            );
            ALTER TABLE public.user_temporary OWNER TO postgres;

            DROP TABLE IF EXISTS public.task_timeline;
            CREATE TABLE IF NOT EXISTS public.task_timeline (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,
                is_deleted boolean default false,
                is_active boolean default true,
                status character varying(25) DEFAULT NULL,
                status_change_time timestamp with time zone NOT NULL,
                task_id bigint,
                tasker_id bigint,
                poster_id bigint
            );
            ALTER TABLE public.task_timeline OWNER TO postgres;

            CREATE TABLE IF NOT EXISTS public.conversations (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                description text,
                title character varying(255),
                is_deleted boolean DEFAULT false NOT NULL,
                is_active boolean DEFAULT true NOT NULL,

                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,

                tasker_public_id bigint NOT NULL,
                poster_public_id bigint NOT NULL,
                task_public_id bigint NOT NULL
            );
            ALTER TABLE public.conversations OWNER TO postgres;

            CREATE TABLE IF NOT EXISTS public.user_chats (
                id BIGSERIAL NOT NULL,
                public_id bigint NOT NULL,
                message text,
                message_attributes jsonb DEFAULT '{}',
                is_deleted boolean DEFAULT false NOT NULL,
                is_active boolean DEFAULT true NOT NULL,

                create_date_time timestamp with time zone DEFAULT now() NOT NULL,
                update_date_time timestamp with time zone,

                sender_public_id bigint NOT NULL,
                receiver_public_id bigint NOT NULL,
                task_public_id bigint NOT NULL
            );
            ALTER TABLE public.user_chats OWNER TO postgres;
            alter table public.user_chats alter column message_attributes type text;

        </sql>
    </changeSet>

    <changeSet id="constraints" author="Muhammad Safwan">
        <sql>

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT users_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.awards
            ADD CONSTRAINT awards_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.reviews
            ADD CONSTRAINT reviews_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.skills
            ADD CONSTRAINT skills_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT tasks_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_addresses
            ADD CONSTRAINT user_addresses_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_awards
            ADD CONSTRAINT user_awards_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_payment_cards
            ADD CONSTRAINT user_payment_cards_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_skills
            ADD CONSTRAINT user_skills_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_certifications
            ADD CONSTRAINT user_certifications_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_transactions
            ADD CONSTRAINT user_transactions_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_bank_account
            ADD CONSTRAINT user_bank_account_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_wallet
            ADD CONSTRAINT user_wallet_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.report_user
            ADD CONSTRAINT report_user_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.support_user
            ADD CONSTRAINT support_user_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.task_categories
            ADD CONSTRAINT task_categories_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_bids
            ADD CONSTRAINT user_bids_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.logs
            ADD CONSTRAINT logs_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_temporary
            ADD CONSTRAINT user_temporary_pkey PRIMARY KEY (id);


            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_access_token_users UNIQUE (access_token);

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_phone_number_users UNIQUE (phone_number);

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_email_users UNIQUE (email);

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_stripe_id_users UNIQUE (stripe_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT uk_public_id_tasks UNIQUE (public_id);

            ALTER TABLE ONLY public.awards
            ADD CONSTRAINT uk_public_id_awards UNIQUE (public_id);

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_email_verification_token_users UNIQUE (email_verification_token);

            ALTER TABLE ONLY public.skills
            ADD CONSTRAINT uk_public_id_skills UNIQUE (public_id);

            ALTER TABLE ONLY public.reviews
            ADD CONSTRAINT uk_public_id_reviews UNIQUE (public_id);

            ALTER TABLE ONLY public.user_addresses
            ADD CONSTRAINT uk_public_id_user_addresses UNIQUE (public_id);

            ALTER TABLE ONLY public.user_skills
            ADD CONSTRAINT uk_public_id_user_skills UNIQUE (public_id);

            ALTER TABLE ONLY public.user_payment_cards
            ADD CONSTRAINT uk_public_id_user_payment_cards UNIQUE (public_id);

            ALTER TABLE ONLY public.user_payment_cards
            ADD CONSTRAINT uk_card_number_user_payment_cards UNIQUE (card_number);

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_phone_verification_token_users UNIQUE (phone_verification_token);

            ALTER TABLE ONLY public.user_awards
            ADD CONSTRAINT uk_public_id_user_awards UNIQUE (public_id);

            ALTER TABLE ONLY public.users
            ADD CONSTRAINT uk_public_id_users UNIQUE (public_id);

            ALTER TABLE ONLY public.user_bank_account
            ADD CONSTRAINT uk_public_id_user_bank_account UNIQUE (public_id);

            ALTER TABLE ONLY public.user_bank_account
            ADD CONSTRAINT uk_account_number_user_bank_account UNIQUE (account_number);

            ALTER TABLE ONLY public.user_transactions
            ADD CONSTRAINT uk_public_id_user_transactions UNIQUE (public_id);

            ALTER TABLE ONLY public.user_transactions
            ADD CONSTRAINT uk_payment_id_user_transactions UNIQUE (payment_id);

            ALTER TABLE ONLY public.user_wallet
            ADD CONSTRAINT uk_public_id_user_wallet UNIQUE (public_id);

            ALTER TABLE ONLY public.support_user
            ADD CONSTRAINT uk_public_id_support_user UNIQUE (public_id);

            ALTER TABLE ONLY public.report_user
            ADD CONSTRAINT uk_public_id_report_user UNIQUE (public_id);

            ALTER TABLE ONLY public.report_user
            ADD CONSTRAINT uk_reporter_and_reported_user_cannot_be_same CHECK (reported_public_id != reporter_public_id);

            ALTER TABLE ONLY public.task_categories
            ADD CONSTRAINT uk_public_id_task_categories UNIQUE (public_id);

            ALTER TABLE ONLY public.user_bids
            ADD CONSTRAINT uk_public_id_user_bids UNIQUE (public_id);

            ALTER TABLE ONLY public.user_temporary
            ADD CONSTRAINT uk_email_user_temporary UNIQUE (email);

            ALTER TABLE ONLY public.user_temporary
            ADD CONSTRAINT uk_phone_numbers_user_temporary UNIQUE (phone_number);




            ALTER TABLE ONLY public.user_awards
            ADD CONSTRAINT fk_award_id_user_awards FOREIGN KEY (award_id) REFERENCES public.awards(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_blocked_by_tasks FOREIGN KEY (blocked_by) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.reviews
            ADD CONSTRAINT fk_tasker_public_id_reviews FOREIGN KEY (tasker_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_payment_cards
            ADD CONSTRAINT fk_user_id_user_payment_cards FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_supplier_public_id_tasks FOREIGN KEY (supplier_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_user_address_tasks FOREIGN KEY (user_address_public_id) REFERENCES public.user_addresses(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_task_category_tasks FOREIGN KEY (task_category_public_id) REFERENCES public.task_categories(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_task_transaction_tasks FOREIGN KEY (task_transaction) REFERENCES public.user_transactions(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_review_tasks FOREIGN KEY (review_public_id) REFERENCES public.reviews(public_id);

            ALTER TABLE ONLY public.user_bank_account
            ADD CONSTRAINT fk_user_id_user_bank_account FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_wallet
            ADD CONSTRAINT fk_user_public_id_user_wallet FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_transactions
            ADD CONSTRAINT fk_user_public_id_user_transactions FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.reviews
            ADD CONSTRAINT fk_poster_public_id_reviews FOREIGN KEY (poster_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.reviews
            ADD CONSTRAINT fk_task_public_id_reviews FOREIGN KEY (task_public_id) REFERENCES public.tasks(public_id);

            ALTER TABLE ONLY public.user_skills
            ADD CONSTRAINT fk_skill_id_user_skills FOREIGN KEY (skill_id) REFERENCES public.skills(public_id);

            ALTER TABLE ONLY public.user_addresses
            ADD CONSTRAINT fk_user_id_user_addresses FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_skills
            ADD CONSTRAINT fk_user_id_user_skills FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_awards
            ADD CONSTRAINT fk_user_id_user_awards FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.tasks
            ADD CONSTRAINT fk_buyer_public_id_tasks FOREIGN KEY (buyer_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_certifications
            ADD CONSTRAINT fk_user_id_user_certifications FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.support_user
            ADD CONSTRAINT fk_user_id_support_user FOREIGN KEY (user_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.report_user
            ADD CONSTRAINT fk_reporter_user_id_report_user FOREIGN KEY (reporter_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.report_user
            ADD CONSTRAINT fk_reported_user_id_report_user FOREIGN KEY (reported_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_bids
            ADD CONSTRAINT fk_task_id_user_bids FOREIGN KEY (task_id) REFERENCES public.tasks(public_id);

            ALTER TABLE ONLY public.user_bids
            ADD CONSTRAINT fk_user_id_user_bids FOREIGN KEY (user_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_temporary
            ADD CONSTRAINT fk_user_id_user_temporary FOREIGN KEY (user_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.task_timeline
            ADD CONSTRAINT task_timeline_pkey PRIMARY KEY (id);

            ALTER TABLE ONLY public.task_timeline
            ADD CONSTRAINT fk_task_id_task_timeline FOREIGN KEY (task_id) REFERENCES public.tasks(public_id);

            ALTER TABLE ONLY public.task_timeline
            ADD CONSTRAINT fk_tasker_id_task_timeline FOREIGN KEY (tasker_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.task_timeline
            ADD CONSTRAINT fk_poster_id_task_timeline FOREIGN KEY (poster_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.conversations
            ADD CONSTRAINT conversations_pKey PRIMARY KEY (id);

            ALTER TABLE ONLY public.conversations
            ADD CONSTRAINT uk_public_id_conversations UNIQUE (public_id);

            ALTER TABLE public.conversations
            ADD CONSTRAINT uk_unique_conversations UNIQUE (tasker_public_id, poster_public_id, task_public_id);

            ALTER TABLE ONLY public.conversations
            ADD CONSTRAINT fk_conversation_tasker FOREIGN KEY (tasker_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.conversations
            ADD CONSTRAINT fk_conversation_poster FOREIGN KEY (poster_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.conversations
            ADD CONSTRAINT fk_conversation_task FOREIGN KEY (task_public_id) REFERENCES public.tasks(public_id);

            ALTER TABLE ONLY public.user_chats
            ADD CONSTRAINT user_chats_pKey PRIMARY KEY (id);

            ALTER TABLE ONLY public.user_chats
            ADD CONSTRAINT uk_public_id_user_chats UNIQUE (public_id);

            ALTER TABLE ONLY public.user_chats
            ADD CONSTRAINT fk_user_chats_sender FOREIGN KEY (sender_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_chats
            ADD CONSTRAINT fk_user_chats_receiver FOREIGN KEY (receiver_public_id) REFERENCES public.users(public_id);

            ALTER TABLE ONLY public.user_chats
            ADD CONSTRAINT fk_user_chats_task FOREIGN KEY (task_public_id) REFERENCES public.tasks(public_id);

            COMMIT;

        </sql>
    </changeSet>

    <changeSet id="refeshTokenColumnAdded" author="Muhammad Safwan">
        <sql>

            ALTER TABLE USERS ADD refresh_token character varying(255);

            ALTER TABLE ONLY users
            ADD CONSTRAINT uk_refresh_token_users UNIQUE (refresh_token);

            commit;

        </sql>
    </changeSet>

    <changeSet id="notificationTypesTable" author="Muhammad Safwan">
        <sql>

            create table if not exists notification_types
            (
                id bigserial not null
                constraint notification_types_pkey
                primary key,
                create_date_time timestamp,
                update_date_time timestamp,
                description varchar(255),
                icon_path varchar(255),
                is_deleted boolean,
                name varchar(255)
            );

            commit;

        </sql>
    </changeSet>

    <changeSet id="userNotificationTypesTable" author="Muhammad Safwan">
        <sql>

            create table if not exists user_notifications
            (
                id bigserial not null
                constraint user_notifications_pkey
                primary key,
                create_date_time timestamp,
                update_date_time timestamp,
                actions varchar(255),
                actions_info varchar(255),
                is_deleted boolean,
                notification_image varchar(255),
                notification_source varchar(255),
                notification_text varchar(255) not null,
                public_id bigint,
                notification_type_id bigint not null
                constraint fk_type_to_notification
                references notification_types,
                user_id bigint not null
                constraint fk_user_to_notification
                references users,
                notification_title varchar(255) not null,
                is_archived boolean,
                is_read boolean
            );

            commit;

        </sql>
    </changeSet>

    <changeSet id="rolePermissionsTable" author="Muhammad Safwan">
        <sql>

            create table if not exists role
            (
                id bigserial not null constraint role_pkey primary key,
                role_name character varying(255) NOT NULL,
                role_type character varying(255) NOT NULL,
                create_date_time timestamp,
                update_date_time timestamp,
                is_deleted boolean
            );

            create table if not exists permission
            (
                id bigserial not null constraint permission_pkey primary key,
                permission_name character varying(255) NOT NULL,
                permission_code character varying(255) NOT NULL,
                create_date_time timestamp,
                update_date_time timestamp,
                is_deleted boolean
            );

            create table if not exists role_permission
            (
                id bigserial not null constraint role_permission_pkey primary key,
                role_id bigint NOT NULL constraint fk_role_id_to_role references role,
                permission_id bigint NOT NULL constraint fk_permission_id_to_permission references permission,
                is_deleted boolean
            );

            ALTER TABLE USERS ADD role_id bigint;

            ALTER TABLE ONLY public.USERS
            ADD CONSTRAINT fk_user_to_role FOREIGN KEY (role_id) REFERENCES public.role(id);

            commit;

        </sql>
    </changeSet>

    <changeSet id="changeTokenDataType" author="Muhammad Safwan">
        <sql>

            ALTER TABLE users ALTER COLUMN access_token TYPE varchar;

            ALTER TABLE users ALTER COLUMN refresh_token TYPE varchar;

            commit;

        </sql>
    </changeSet>

    <changeSet id="distanceFunction" author="Muhammad Safwan">
        <sql endDelimiter=";;">

            CREATE OR REPLACE FUNCTION calculate_distance(lat1 float, lon1 float, lat2 float, lon2 float, units varchar)
            RETURNS float AS $dist$
            DECLARE
            dist float = 0;
            radlat1 float;
            radlat2 float;
            theta float;
            radtheta float;
            BEGIN
            IF lat1 = lat2 OR lon1 = lon2
            THEN RETURN dist;
            ELSE
            radlat1 = pi() * lat1 / 180;
            radlat2 = pi() * lat2 / 180;
            theta = lon1 - lon2;
            radtheta = pi() * theta / 180;
            dist = sin(radlat1) * sin(radlat2) + cos(radlat1) * cos(radlat2) * cos(radtheta);

            IF dist > 1 THEN dist = 1; END IF;

            dist = acos(dist);
            dist = dist * 180 / pi();
            dist = dist * 60 * 1.1515;

            IF units = 'K' THEN dist = dist * 1.609344; END IF;
            IF units = 'N' THEN dist = dist * 0.8684; END IF;

            RETURN dist;
            END IF;
            END;
            $dist$ LANGUAGE plpgsql;;

        </sql>
    </changeSet>

</databaseChangeLog>